#!/usr/bin/env python3
"""RKVMLoader

RKVMLoader loads KVM Virtual Machines in a predefined
sequence. By default domains will initially be
gracefully shutdown, but forcefully destroyed after a
timeout (default 300 sec).

Usage:
    rkvmloader start [-c <file>] [-v]
    rkvmloader stop [-c <file>] [-v] [-t <sec>] [--force]
    rkvmloader (-h | --help)
    rkvmloader --version


Options:
  -v --verbose          Be Verbose
  -h --help             Show this screen
  -c --config=<config>  Configuration file [default: /etc/rkvmloader.conf]
  --force               Forcefully kill VM's immidiately
  -t --timeout=<sec>    Force off after <sec> seconds [default: 300]

"""

# Builtin
import os
import socket
import subprocess
import sys
import xml.etree.ElementTree as ET
import time

# Libraries
import docopt
import configparser
import libvirt


def get_running_vms(conn):
    return [conn.lookupByID(x).name() for x in conn.listDomainsID()]


def print_v(message, *args, **kwargs):
    if arguments['--verbose']:
        print(message, *args, **kwargs)
    if kwargs.get('end', '\n') == '':
        sys.stdout.flush()


def qemu_connect(qemu_host="qemu:///system"):
    print_v("(I) Connecting to %s..." % qemu_host, end='')

    conn = libvirt.open(qemu_host)

    if conn is None:
        print('(E) Failed to connect to %s' % qemu_host, file=sys.stderr)
        close_and_exit(1)

    print_v('Done.')
    return conn


def load_config_file(configfile):
    error = False
    conf = configparser.ConfigParser()
    conf.read(configfile)
    hosts = []

    try:
        hosts = conf['hosts']['sequence'].split(',')
    except KeyError:
        print("(E) %s: Couldn not find 'sequence' in section [hosts]." % configfile)
        error = True

    if conf['hosts']['probe'] not in ['ping-sweep', 'single-ping', 'arp-cache']:
        print("(E) %s: [hosts] probe variable must be either " +
              "'ping-sweep', 'single-ping' or 'arp-cache" % configfile)
        error = True

    if conf['hosts']['probe'] == 'ping-sweep' and os.getuid() != 0:
        print("(E) %s: Need to use sudo or be root for 'ping-sweep'" % configfile)
        error = True

    if conf['hosts']['probe'] == 'ping-sweep' and not subprocess.call(["/usr/bin/which", "nmadp"]):
        print("(E) The NMap utility should be installed for ping sweep.")
        error = True


    for h in hosts:
        if h not in conf:
            print("(E) %s: Could not find declaration of host '%s'" % (configfile, h))
            error = True

    for h in hosts:
        if len(conf[h]['waitfor'].split(":")[0].split("/")) != 2:
            print("[%s] waitfor-variable should be <network>:<prort> where network is CIDR-notation" % host)
            error = True
    if error:
        sys.exit(1)

    return conf


def determine_host_macs(conn, host_name):
    mac_list = []
    print_v("(I) Determining MAC's for %s..." % host_name, end='')
    vm_xml = conn.lookupByName(host_name).XMLDesc()
    root = ET.fromstring(vm_xml)
    for i in root.findall('./devices/interface'):
        for mac in i.findall('mac'):
            mac_list.append(mac.attrib['address'])
    print_v(" Found %s" % mac_list)
    return mac_list


def get_vm_ip(conn, host_name):

    mac_list = determine_host_macs(conn, host_name)
    for mac in mac_list:

        if config['hosts']['probe'] != "arpwatchd":

            if config['hosts']['probe'] == 'single-ping':
                cmd = "ping -n 1 %s" % config[host_name]['waitfor'][0]
                ping = subprocess.call(cmd, shell=True, stdout=subprocess.PIPE)

            if config['hosts']['probe'] == 'ping-sweep':
                network = config[host_name]['waitfor'].split(":")[0]
                print_v("(I) Doing ping sweep of %s" % network)

                cmd = "nmap -T5 -sP %s" % network
                nmap = subprocess.call(cmd, shell=True, stdout=subprocess.PIPE)


            cmd = "arp -n | grep %s | awk ' { print $1 }'" % mac
            p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
            output, errors = p.communicate()
            if output != b'':
                ip = output.decode('UTF-8').strip('\n')
                print_v('(I) Found %s' % ip)
                return ip
            else:
                return False


def start_vm(conn, host_name):

    waitfor = config[host_name]['waitfor'].split(':')
    ip = ''

    if host_name in get_running_vms(conn):
        print_v('(I) Host %s already running' % host_name)
    else:
        print_v('(I) Starting %s ' % (host_name,))
        conn.lookupByName(host_name).create()

    print_v('(I) Getting IP address for %s... ' % host_name)

    while not ip:
        ip = get_vm_ip(conn, host_name)
        time.sleep(1)

    if waitfor[1] != 'PASS':
        print_v('(I) Checking TCP port %s on %s... ' % (waitfor[1], ip), end="")

        connected = False
        sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        while not connected:
            if sock.connect_ex((ip, int(waitfor[1]))) != 0:
                time.sleep(1)
            else:
                connected = True
                print_v('Connection succeeded.', end="\n")
    else:
        print_v('(I) Skipping connection test. IP address fine enough.')

    print_v('(I) Done booting %s' % host_name)



def stop_vm(conn, host):
    if host not in get_running_vms(conn):
        print_v('Host already stopped.')
    else:
        up = True
        i = 0
        print_v('(I) Stopping %s...' % host, end='')
        if arguments['--force']:
            conn.lookupByName(host).destroy()
            up = False
        else:
            conn.lookupByName(host).shutdown()

        while up:
            if conn.lookupByName(host).state()[0] == 5:
                break
            if i == int(arguments['--timeout']):
                print_v(" Timeout, force kill!", end="")
                try:
                    conn.lookupByName(host).destroy()
                except:
                    pass
                break
            i = i + 1
            time.sleep(1)

        print_v(' Done', end='\n')


def show_overview(conn):
    print_v("(I) Running VM id's: %s" % conn.listDomainsID())
    print_v("(I) Running VM names: %s" % get_running_vms(conn))


def close_and_exit(conn):
    print_v("(I) Closing connection.")
    conn.close()
    sys.exit(1)


if __name__ == "__main__":
    arguments = docopt.docopt(__doc__, version='RKVMLoader 0.1')

    config = load_config_file(arguments['--config'])
    conn = qemu_connect()
    show_overview(conn)

    if arguments['start']:
        sequence = config['hosts']['sequence'].split(',')
        print_v("(I) Starting VM's in sequence %s" % sequence)
        for host in sequence:
            sucess = start_vm(conn, host)

    if arguments['stop']:
        sequence = [ x for x in reversed(config['hosts']['sequence'].split(','))]
        print_v("(I) Stopping VM's in sequence %s" % sequence)
        for host in sequence:
            stop_vm(conn, host)

    show_overview(conn)
    close_and_exit(conn)
